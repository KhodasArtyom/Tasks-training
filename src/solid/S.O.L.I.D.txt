1) Single Responsobility principle(Прнцип единственной ответственности)

1 класс = 1 задача
1 сущность = 1 задача
Преимущества:
- появилсь  модули(декомпозиция), читабельность выросла
- вносить изменения стало проще
- избавились от антипаттерна GodObject
- класс инкапсулирует решение одной задачи

2) Open-closed Principle(Принцип октрытости/ закрытости)
Открыты для расширения, закрыты для изменения

3)Liskov Substitution Principle(Принцип подстановки Барбары Лисков)
Определене: Функции, суности, которые используют родительский тип должны точно также работать
и с дочерними классами. При этом ничего не должно ломаться в логике рабоыт программы.
Другими словами: Наследуемы класс должен дополнять а не замещать поведение базового.

4)Interface segregation principle(Принцип разделения интерфейса)


5)Dependency inversion principle(Принцип инверсии зависимости)
Определение: Модул высокого уровня не должны зависеть от модулей более низкого уровня
,должны завсеть от абстракций.А абстракции не должны зависеть от деталей, а наоборот.

